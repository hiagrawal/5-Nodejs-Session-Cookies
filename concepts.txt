we want to persist the login data and login info across multiple requests so how can be do that...

req object persists only till we dont send the response. Once we send the res that req is lost
so if have to store loggedIn info, and we keep it in req object like we kept for user. req.user
we will not be able to access the same in another route when we send the response back

Another is we can save in a global variable and not in req object but if we do so, 
that would be shared across all requests but also across all users

so the way to handle this is, we save the data in user's browser 
so it will be available across requests and also to only specific/intended user since it is in user's browser

we can do so by setting cookie in response's header so it will saved in the user's browser 
and on every subsequent call made to the server, we get cookie paramter in request's body
so it is always sent with every request so it is a cross requests data storage mechanism

we can check the same in developer's tool -> Application tab -> Cookie section -> and clicking on website name (localhost)

and can check the same in network tab in request header

disadvantage of cookie is since it is stored on the client side, 
it is visible in developer tools - Application tab, and user can easily manipulate it
and obviously which should not be the case hence it is not advisable to store sensitive information in cookies
and so we have sessions, Sessions are used to store sensitive information across requests on the server side 

but there are some cases, where cookies are helpful and can be used like..
Tracking users. It is a very common scenario where even if the user is not on the page, and what all pages user is on,
every info is sent with evey request made to the server

Cookies expire once we close the browser if we dont set anything so there are various config paramters that we can set like
Expires which takes the data in http date format which states when cookie should expire
res.setHeader('Set-Cookie', 'loggedIn=true; Expires=<somevalue>');
Max-Age which takes a number in second, that is for how long that cookie should stay around
res.setHeader('Set-Cookie', 'loggedIn=true; Max-Age=10');
Domain which specifies to which domain cookie should be sent which is again used for tracking
res.setHeader('Set-Cookie', 'loggedIn=true; Domain=<somevalue>');
Secure which specifies that the cookie should be set only when it is secure that is https
res.setHeader('Set-Cookie', 'loggedIn=true; Secure');
HttpOnly which specifies only on http server that is we cant access the cookie value through client's side javascript (bcz it always runs on server https)
so this is a another security measure bcz it will be attached to the every request and accessible in cross requests 
but cant be accesed inside the client's browsers javascript code
res.setHeader('Set-Cookie', 'loggedIn=true; HttpOnly');


Sessions:
Sessions are stored on the server that is on the server side and on the server, it is stored either in memory or in database
A client needs to tell the server to which session he belongs. for that we will use cookie that will store the id of the session
That id will usually be a hashed id so that only server can confirm to which id it belongs
and hence their will be no point of user manipulating it at client side 
and session will now contain the confidential info on the server side

For using session, we need third party package so will install
npm install --save express-session